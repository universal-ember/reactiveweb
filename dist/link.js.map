{"version":3,"file":"link.js","sources":["../src/link.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { assert } from '@ember/debug';\nimport { associateDestroyableChild } from '@ember/destroyable';\n\nimport { compatOwner } from './-private/ember-compat.ts';\n\nimport type { Class, Stage1Decorator, Stage1DecoratorDescriptor } from '#types';\n\nlet getOwner = compatOwner.getOwner;\nlet setOwner = compatOwner.setOwner;\n\ntype NonKey<K> = K extends string ? never : K extends symbol ? never : K;\n\n/**\n * A util to abstract away the boilerplate of linking of \"things\" with an owner\n * and making them destroyable.\n *\n * ```js\n * import Component from '@glimmer/component';\n * import { link } from 'reactiveweb/link';\n *\n * class MyClass {  ... }\n *\n * export default class Demo extends Component {\n *   @link(MyClass) myInstance;\n * }\n * ```\n */\nexport function link<Instance>(child: Class<Instance>): Stage1Decorator;\n\n/**\n * A util to abstract away the boilerplate of linking of \"things\" with an owner\n * and making them destroyable.\n *\n * ```js\n * import Component from '@glimmer/component';\n * import { cached } from '@glimmer/tracking';\n * import { link } from 'reactiveweb/link';\n *\n * export default class Demo extends Component {\n *   @cached\n *   get myFunction() {\n *     let instance = new MyClass(this.args.foo);\n *\n *     return link(instance, this);\n *   }\n * }\n * ```\n *\n * NOTE: If args change, as in this example, memory pressure will increase,\n *       as the linked instance will be held on to until the host object is destroyed.\n */\nexport function link<Child, Other>(child: Child, parent: NonKey<Other>): Child;\n\n/**\n * A util to abstract away the boilerplate of linking of \"things\" with an owner\n * and making them destroyable.\n *\n * ```js\n * import Component from '@glimmer/component';\n * import { link } from 'reactiveweb/link';\n *\n * class MyClass {  ... }\n *\n * export default class Demo extends Component {\n *   @link myInstance = new MyClass();\n * }\n * ```\n *\n * NOTE: reactive args may not be passed to `MyClass` directly if you wish updates to be observed.\n *   A way to use reactive args is this:\n *\n * ```js\n * import Component from '@glimmer/component';\n * import { tracked } from '@glimmer/tracking';\n * import { link } from 'reactiveweb/link';\n *\n * class MyClass {  ... }\n *\n * export default class Demo extends Component {\n *   @tracked foo = 'bar';\n *\n *   @link myInstance = new MyClass({\n *      foo: () => this.args.foo,\n *      bar: () => this.bar,\n *   });\n * }\n * ```\n *\n * This way, whenever foo() or bar() is invoked within `MyClass`,\n * only the thing that does that invocation will become entangled with the tracked data\n * referenced within those functions.\n */\nexport function link(...args: Parameters<Stage1Decorator>): void;\n\nexport function link(...args: any[]) {\n  if (args.length === 3) {\n    /**\n     * Uses initializer to get the child\n     */\n    return linkDecorator(...(args as Parameters<Stage1Decorator>));\n  }\n\n  if (args.length === 1) {\n    return linkDecoratorFactory(...(args as unknown as [any]));\n  }\n\n  // Because TS types assume property decorators might not have a descriptor,\n  // we have to cast....\n  return directLink(...(args as unknown as [object, object]));\n}\n\nfunction directLink(child: object, parent: object) {\n  associateDestroyableChild(parent, child);\n\n  let owner = getOwner(parent);\n\n  if (owner) {\n    setOwner(child, owner);\n  }\n\n  return child;\n}\n\nfunction linkDecoratorFactory(child: Class<unknown>) {\n  return function decoratorPrep(...args: Parameters<Stage1Decorator>) {\n    return linkDecorator(...args, child);\n  };\n}\n\nfunction linkDecorator(\n  _prototype: object,\n  key: string | symbol,\n  descriptor: Stage1DecoratorDescriptor | undefined,\n  explicitChild?: Class<unknown>\n): void {\n  assert(`@link is a stage 1 decorator, and requires a descriptor`, descriptor);\n  assert(`@link can only be used with string-keys`, typeof key === 'string');\n\n  let { initializer } = descriptor;\n\n  assert(\n    `@link requires an initializer or be used as a decorator factory (\\`@link(...))\\`). For example, ` +\n      `\\`@link foo = new MyClass();\\` or \\`@link(MyClass) foo;\\``,\n    initializer || explicitChild\n  );\n\n  let caches = new WeakMap<object, any>();\n\n  return {\n    get(this: object) {\n      let child = caches.get(this);\n\n      if (!child) {\n        if (initializer) {\n          child = initializer.call(this);\n        }\n\n        if (explicitChild) {\n          // How do you narrow this to a constructor?\n          child = new explicitChild();\n        }\n\n        assert(`Failed to create child instance.`, child);\n\n        associateDestroyableChild(this, child);\n\n        let owner = getOwner(this);\n\n        assert(`Owner was not present on parent. Is instance of ${this.constructor.name}`, owner);\n\n        setOwner(child, owner);\n\n        caches.set(this, child);\n        assert(`Failed to create cache for internal resource configuration object`, child);\n      }\n\n      return child;\n    },\n  } as unknown as void /* Thanks TS. */;\n}\n"],"names":["getOwner","compatOwner","setOwner","link","args","length","linkDecorator","linkDecoratorFactory","directLink","child","parent","associateDestroyableChild","owner","decoratorPrep","_prototype","key","descriptor","explicitChild","assert","initializer","caches","WeakMap","get","call","constructor","name","set"],"mappings":"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"}