{"version":3,"file":"get-promise-state.js","sources":["../src/get-promise-state.ts"],"sourcesContent":["import { tracked } from '@glimmer/tracking';\nimport { waitForPromise } from '@ember/test-waiters';\n\ntype DePromise<Value> = Value extends Promise<infer Result> ? Result : Value;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype ResolvedValueOf<Value> = Value extends (...args: any[]) => any\n  ? DePromise<ReturnType<Value>>\n  : DePromise<Value>;\n\n/**\n * Custom error type that explains what phase of getPromiseState an error could have occurred during.\n * Provides the original error as well.\n */\nexport type Error = {\n  /**\n   * Why there is an error\n   */\n  reason: string;\n  /**\n   * The original thrown/rejected error value\n   */\n  original: unknown;\n};\n\n/**\n * The state of a Value or Promise that was passed to `getPromiseState`\n */\nexport interface State<Result> {\n  /**\n   * If the value passed to `getPromiseState` was a promise or function that returns a promise,\n   * this will initially be true, and become false when the promise resolves or errors.\n   */\n  isLoading: boolean;\n  /**\n   * If the value passed to `getPromiseState` was a promise or function,\n   * this will be the value thrown / caught from the promise or function.\n   */\n  error: undefined | null | Error;\n  /**\n   * The final value.\n   * This will be undefined initially if the value passed in to `getPromiseState` is a promise or function that returns a promise.\n   */\n  resolved: Result | undefined;\n\n  /**\n   * JSON Serializer for inspecting the full State\n   */\n  toJSON(): {\n    isLoading: boolean;\n    error: Error | null;\n    resolved: Result | undefined;\n  };\n}\n\nconst promiseCache = new WeakMap<object, State<unknown>>();\n\nexport const REASON_FUNCTION_EXCEPTION = `Passed function threw an exception`;\nexport const REASON_PROMISE_REJECTION = `Promise rejected while waiting to resolve`;\n\nclass StateImpl<Value> implements State<Value> {\n  /**\n   * @private\n   */\n  @tracked _isLoading: undefined | boolean;\n  /**\n   * @private\n   */\n  @tracked _error: undefined | null | Error;\n  /**\n   * @private\n   */\n  @tracked _resolved: undefined | Value;\n\n  #initial: undefined | Partial<State<Value>>;\n\n  constructor(fn: GetPromiseStateInput<Value>, initial?: Partial<State<Value>>) {\n    this.#initial = initial;\n\n    try {\n      var maybePromise = isThennable(fn) ? fn : isFunction(fn) ? fn() : fn;\n    } catch (e) {\n      this.#initial = {\n        isLoading: false,\n        error: { reason: REASON_FUNCTION_EXCEPTION, original: e },\n      };\n\n      return;\n    }\n\n    if (typeof maybePromise === 'object' && maybePromise !== null && 'then' in maybePromise) {\n      waitForPromise(\n        maybePromise\n          .then((value) => (this._resolved = value))\n          .catch((error) => (this._error = { reason: REASON_PROMISE_REJECTION, original: error }))\n          .finally(() => (this._isLoading = false))\n      );\n\n      return;\n    }\n\n    this.#initial = { isLoading: false, error: null, resolved: maybePromise };\n  }\n\n  get isLoading() {\n    return this._isLoading ?? this.#initial?.isLoading ?? false;\n  }\n  get error() {\n    return this._error ?? this.#initial?.error ?? null;\n  }\n  get resolved() {\n    return this._resolved ?? this.#initial?.resolved;\n  }\n\n  toJSON() {\n    return { isLoading: this.isLoading, error: this.error, resolved: this.resolved };\n  }\n}\n\nexport type GetPromiseStateInput<Value> =\n  | Value\n  | Promise<Value>\n  | (() => Value)\n  | (() => Promise<Value>);\n\n/**\n * Returns a reactive state for a given value, function, promise, or function that returns a promise.\n *\n * Also caches the result for the given value, so `getPromiseState` will become synchronous if the passed value\n * has already been resolved.\n *\n * Normally when trying to derive async state, you'll first need to invoke a function to get the promise from that function's return value.\n * With `getPromiseState`, a passed function will be invoked for you, so you can skip that step.\n *\n * @example\n * We can use `getPromiseState` to dynamically load and render a component\n *\n * ```gjs\n * import { getPromiseState } from 'reactiveweb/get-promise-state';\n *\n * let state = getPromiseState(() => import('./some-module/component'));\n *\n * <template>\n *   {{#if state.isLoading}}\n *     ... pending ...\n *   {{else if state.error}}\n *     oh no!\n *   {{else if state.resolved}}\n *     <state.resolved />\n *   {{/if}}\n * </template>\n * ```\n *\n * @example\n * `getPromiseState` can also be used in a class without `@cached`, because it maintains its own cache.\n * ```gjs\n * import Component from '@glimmer/component';\n * import { getPromiseState } from 'reactiveweb/get-promise-state';\n *\n * async function readFromSomewhere() { // implementation omitted for brevity\n * }\n *\n * export default class Demo extends Component {\n *   // doesn't matter how many times state is accessed, you get a stable state\n *   get state() {\n *     return getPromiseState(readFromSomewhere);\n *   }\n *\n *   <template>\n *     {{#if this.state.resolved}}\n *        ...\n *     {{/if}}\n *   </template>\n * }\n * ```\n *\n * @example\n * A reactively constructed function will also be used and have its result cached between uses\n *\n * ```gjs\n * import Component from '@glimmer/component';\n * import { getPromiseState } from 'reactiveweb/get-promise-state';\n *\n * async function readFromSomewhere() { // implementation omitted for brevity\n * }\n *\n * export default class Demo extends Component {\n *   // Note: the @cached is important here because we don't want repeat accesses\n *   //       to cause doAsync to be called again unless @id changes\n *   @cached\n *   get promise() {\n *     return this.doAsync(this.args.id);\n *   }\n *\n *   get state() {\n *     return getPromiseState(this.promise);\n *   }\n *\n *   <template>\n *     {{#if this.state.resolved}}\n *        ...\n *     {{/if}}\n *   </template>\n * }\n * ```\n *\n * NOTE: This `getPromiseState` is not a replacement for [WarpDrive](https://docs.warp-drive.io/)'s [getRequestState](https://www.npmjs.com/package/@warp-drive/ember#getrequeststate)\n *       namely, the `getPromiseState` in this library (reactiveweb) does not support futures, cancellation, or anything else specific to warp-drive.\n *\n *\n * --------------\n\n_comparison of pure capability_\n\n| . | reactiveweb | @warpdrive/ember |\n| - | ----------- | ---------------- |\n| use in module state[^module-state] | ✅ | ✅ |\n| use in a getter[^cached-getter] | ✅ | ✅ |\n| usable in template | ✅ | ✅  |\n| immediate has resolved value for resolved promise | ✅  | ✅  |\n| test waiter integration | ✅ | ✅ |\n| allows non-promises (forgiving inputs) | ✅ | ❌ |\n| can be used without build | ✅ | ❌[^warp-drive-no-build] |\n| allows prepopulation of result cache by 3rd party | ❌ | ✅ |\n| discriminated states (helpful for TS) | ❌[^needs-work] | ✅ |\n| align with [allSettled's return value](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled#return_value) | ❌[^needs-work] | ✅ |\n\n[^warp-drive-no-build]: the warp-drive team is interested in this work, and wants to make REPLs and CDNs easier as well\n\n\nAll in all, they are very similar. The primary use case I had for creating my own is that I wanted dynamic module loading (with import) to be one line (shown in the first example).\n\nreactiveweb's `getPromiseState` is made primarily for my needs in my own projects, and I don't intend to say anything negative about `@warp-drive`s `getPromiseState` -- I actually took a lot of code from it! it's a good tool.\n\nThese projects of slightly different goals, so some additional information:\n\n_from the perspective of reactiveweb's_ set of goals:\n\n| . | reactiveweb | @warpdrive/ember |\n| - | ----------- | ---------------- |\n| invokes a passed function automatically | ✅ | ❌ |\n| simple state return[^state-compare] | ⚠️[^needs-work] | ⚠️ [^warp-drive-pending-deprecations] |\n\n[^warp-drive-pending-deprecations]: has pending deprecations, otherwise ✅\n[^needs-work]: This is fixable, and probably with little effort, just needs doing\n\n_from the perspective of @warp-drive/core's set of goals_\n\n| . | reactiveweb | @warpdrive/core |\n| - | ----------- | ---------------- |\n| has a simple API surface | ❌ [^invokes-functions] | ✅ |\n| no dependencies | ❌ [^ember-resources] | ⚠️[^warp-drive-no-dependencies] |\n\n\n[^invokes-functions]: `@warp-drive/core` strives for API simplicity, which means few (if any) overloads on its utilities.\n[^warp-drive-no-dependencies]: Does not directly depend on any dependencies, but requires an integration into reactivity (which is technically true for `reactiveweb` as well)\n\n\n[^module-state]: `getPromiseState(promise);`\n[^cached-getter]: requires a stable reference to a promise. getter itself does not need to be cached.\n[^no-dependencies]: warp-drive requires a macros config that isn't compatible with \"non-config\" projects (it's mostly how they generate macros to not gracefully have some behavior if you don't set up their required babel config -- which affects REPL environments (this is solveable via pushing the responsibility to configure babel to the REPLer)). Also, the warp-drive team says this is on their radar, and the'll address it eventually / soon.\n[^ember-resources]: reactiveweb (as a whole) does depend on on ember-resources, but ember-resources itself has no dependencies (for real), and is a very tiny use of a helper manager. Additionally, `getPromiseState` does not depend on `ember-resources`.\n[^wd-aliases]: warp-drive provides _many_ aliases for states, as well as support some extended promise behavior which is not built in to the platform (Futures, etc). This is still good for convenience and compatibility.\n[^state-compare]: in reactiveweb: [State](https://reactive.nullvoxpopuli.com/interfaces/get-promise-state.State.html), and then in `@warp-drive/*`: the [`PromiseState`](https://warp-drive.io/api/@warp-drive/ember/type-aliases/PromiseState) is made of 3 sub types: [PendingPromise](https://warp-drive.io/api/@warp-drive/core/reactive/interfaces/PendingPromise), [ResolvedPromise](https://warp-drive.io/api/@warp-drive/core/reactive/interfaces/ResolvedPromise), and [RejectedPromise](https://warp-drive.io/api/@warp-drive/core/reactive/interfaces/RejectedPromise). Over time, these will align slightly with [allSettled's return value](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled#return_value).\n *\n */\nexport function getPromiseState<Value, Result = ResolvedValueOf<Value>>(\n  fn: GetPromiseStateInput<Value>\n): State<Result> {\n  if (typeof fn !== 'function' && !isThennable(fn)) {\n    return {\n      isLoading: false,\n      error: null,\n      resolved: fn,\n      toJSON() {\n        return { isLoading: false, error: null, resolved: fn };\n      },\n    } as State<Result>;\n  }\n\n  let existing = promiseCache.get(fn);\n\n  if (existing) return existing as State<Result>;\n\n  let state = new StateImpl(fn, { isLoading: true });\n\n  promiseCache.set(fn, state);\n\n  return state as State<Result>;\n}\n\nfunction isThennable(x: unknown): x is Promise<unknown> {\n  if (typeof x !== 'object') return false;\n  if (!x) return false;\n\n  return 'then' in x;\n}\n\n/**\n * This exists because when you guard with typeof x === function normally in TS,\n * you just get `& Function` added to your type, which isn't exactly the narrowing I want.\n *\n * This can result in \"Value & Function\" has no call signatures....\n * which is kinda ridiculous.\n */\nfunction isFunction(x: unknown): x is () => unknown {\n  return typeof x === 'function';\n}\n"],"names":["promiseCache","WeakMap","REASON_FUNCTION_EXCEPTION","REASON_PROMISE_REJECTION","StateImpl","g","prototype","tracked","i","void 0","constructor","fn","initial","maybePromise","isThennable","isFunction","e","isLoading","error","reason","original","waitForPromise","then","value","_resolved","catch","_error","finally","_isLoading","resolved","toJSON","getPromiseState","existing","get","state","set","x"],"mappings":"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"}