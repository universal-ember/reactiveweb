{"version":3,"file":"interval.js","sources":["../src/interval.ts"],"sourcesContent":["import { cell, resource, resourceFactory } from 'ember-resources';\n\nexport interface Options<State, Value> {\n  create: () => State;\n  update: (state: State) => void;\n  read: (state: State) => Value;\n}\n\n/**\n * Utility for live-updating data based on some interval.\n * Can be used for keeping track of durations, time-elapsed, etc.\n *\n * Defaults to updating every 1 second.\n * Options requires specifying how to create, update, and read the state.\n */\nexport function Interval<State, Value>(ms = 1000, options: Options<State, Value>) {\n  return resource(({ on }) => {\n    const value = options.create();\n    const interval = setInterval(() => {\n      options.update(value);\n    }, ms);\n\n    on.cleanup(() => {\n      clearInterval(interval);\n    });\n\n    return () => options.read(value);\n  });\n}\n\nconst secondsOptions: Options<{ start: number; last: ReturnType<typeof cell<number>> }, number> = {\n  create: () => ({ start: Date.now(), last: cell(Date.now()) }),\n  update: (x) => void (x.last.current = Date.now()),\n  read: (x) => Math.round((x.last.current - x.start) / 1000),\n};\n\n/**\n * Returns a live-updating count of seconds passed since initial rendered.\n * Always returns an integer.\n * Updates every 1 second.\n */\nexport function Seconds() {\n  return Interval(1000, secondsOptions);\n}\n\nconst durationOptions: Options<{ start: number; last: ReturnType<typeof cell<number>> }, number> = {\n  create: () => ({ start: Date.now(), last: cell(Date.now()) }),\n  update: (x) => void (x.last.current = Date.now()),\n  read: (x) => x.last.current - x.start,\n};\n\n/**\n * Returns a live-updating duration since initial render.\n * Measured in milliseconds.\n *\n * By default updates every 1 second.\n *\n * Useful combined with\n * [Temporal.Duration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/Duration)\n */\nexport function Duration(ms = 1000) {\n  return Interval(ms, durationOptions);\n}\n\nresourceFactory(Interval);\nresourceFactory(Seconds);\nresourceFactory(Duration);\n"],"names":["Interval","ms","options","resource","on","value","create","interval","setInterval","update","cleanup","clearInterval","read","secondsOptions","start","Date","now","last","cell","x","current","Math","round","Seconds","durationOptions","Duration","resourceFactory"],"mappings":";;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,QAAQA,CAAeC,EAAE,GAAG,IAAI,EAAEC,OAA8B,EAAE;EAChF,OAAOC,QAAQ,CAAC,CAAC;AAAEC,IAAAA,EAAAA;AAAG,GAAC,KAAK;AAC1B,IAAA,MAAMC,KAAK,GAAGH,OAAO,CAACI,MAAM,EAAE,CAAA;AAC9B,IAAA,MAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;AACjCN,MAAAA,OAAO,CAACO,MAAM,CAACJ,KAAK,CAAC,CAAA;KACtB,EAAEJ,EAAE,CAAC,CAAA;IAENG,EAAE,CAACM,OAAO,CAAC,MAAM;MACfC,aAAa,CAACJ,QAAQ,CAAC,CAAA;AACzB,KAAC,CAAC,CAAA;AAEF,IAAA,OAAO,MAAML,OAAO,CAACU,IAAI,CAACP,KAAK,CAAC,CAAA;AAClC,GAAC,CAAC,CAAA;AACJ,CAAA;AAEA,MAAMQ,cAAyF,GAAG;EAChGP,MAAM,EAAEA,OAAO;AAAEQ,IAAAA,KAAK,EAAEC,IAAI,CAACC,GAAG,EAAE;AAAEC,IAAAA,IAAI,EAAEC,IAAI,CAACH,IAAI,CAACC,GAAG,EAAE,CAAA;AAAE,GAAC,CAAC;AAC7DP,EAAAA,MAAM,EAAGU,CAAC,IAAK,MAAMA,CAAC,CAACF,IAAI,CAACG,OAAO,GAAGL,IAAI,CAACC,GAAG,EAAE,CAAC;AACjDJ,EAAAA,IAAI,EAAGO,CAAC,IAAKE,IAAI,CAACC,KAAK,CAAC,CAACH,CAAC,CAACF,IAAI,CAACG,OAAO,GAAGD,CAAC,CAACL,KAAK,IAAI,IAAI,CAAA;AAC3D,CAAC,CAAA;;AAED;AACA;AACA;AACA;AACA;AACO,SAASS,OAAOA,GAAG;AACxB,EAAA,OAAOvB,QAAQ,CAAC,IAAI,EAAEa,cAAc,CAAC,CAAA;AACvC,CAAA;AAEA,MAAMW,eAA0F,GAAG;EACjGlB,MAAM,EAAEA,OAAO;AAAEQ,IAAAA,KAAK,EAAEC,IAAI,CAACC,GAAG,EAAE;AAAEC,IAAAA,IAAI,EAAEC,IAAI,CAACH,IAAI,CAACC,GAAG,EAAE,CAAA;AAAE,GAAC,CAAC;AAC7DP,EAAAA,MAAM,EAAGU,CAAC,IAAK,MAAMA,CAAC,CAACF,IAAI,CAACG,OAAO,GAAGL,IAAI,CAACC,GAAG,EAAE,CAAC;EACjDJ,IAAI,EAAGO,CAAC,IAAKA,CAAC,CAACF,IAAI,CAACG,OAAO,GAAGD,CAAC,CAACL,KAAAA;AAClC,CAAC,CAAA;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASW,QAAQA,CAACxB,EAAE,GAAG,IAAI,EAAE;AAClC,EAAA,OAAOD,QAAQ,CAACC,EAAE,EAAEuB,eAAe,CAAC,CAAA;AACtC,CAAA;AAEAE,eAAe,CAAC1B,QAAQ,CAAC,CAAA;AACzB0B,eAAe,CAACH,OAAO,CAAC,CAAA;AACxBG,eAAe,CAACD,QAAQ,CAAC;;;;"}