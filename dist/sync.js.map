{"version":3,"file":"sync.js","sources":["../src/sync.ts"],"sourcesContent":["/**\n * Synchronize external state.\n *\n * This is a semmantic utility that does nothing more that provide documentation for invoking functions directly from templates and documenting\n * a way to synchronize external state in an auto-tracked system.\n * However, this can lead to infinite revalidation / re-rendering problems if tracked data is set within the function passed to `sync`.\n *\n * As a result, tracked data should not be set within `sync`.\n * Example usage of when you may want to use `sync`\n * ```js\n * import { sync } from 'reactiveweb/sync';\n * import { fn } from '@ember/helper';\n *\n * function setTitle(title) {\n *   document.title = title;\n * }\n *\n * <template>\n *   {{sync (fn setTitle \"My Blog\")}}\n * </template>\n * ```\n *\n * `sync` does autotrack, so accessing tracked data within the function passed to sync\n * will cause updates to be re-synced.\n *\n * ```js\n * import { sync } from 'reactiveweb/sync';\n * import { fn } from '@ember/helper';\n *\n * function setTitle(title) {\n *   document.title = title;\n * }\n *\n * class Demo extends Component {\n *    <template>\n *      {{sync (fn setTitle this.title)}}\n *    </template>\n *\n *    @tracked title;\n *\n *    updateTitle = (newTitle) => this.title = newTitle;\n * }\n * ```\n *\n * If setting tracked data absolutely must happen, you may want to \"detach\" from autotracking.\n * There are two ways to do this, depending on the timing needs of your UI.\n * - `await Promise.resolve()` -- relies on happenstance of how autotracking works\n * - `requestAnimationFrame()` -- more robust, but is delayed until the next available frame to do work in.\n *\n * In either case there are rare timing circumstances where when the synchronized code\n * _happens_ to run, it could accidentally be a part of a tracking frame. It's highly unlikely,\n * since auto-tracking is synchronous, but the probability is non-0.\n *\n * Example of detaching from auto-tracking:\n * ```js\n * import { sync } from 'reactiveweb/sync';\n *\n * class Demo extends Component {\n *    <template>\n *      {{sync setTitle}}\n *    </template>\n *\n *    @tracked title;\n *\n *    updateTitle = (newTitle) => this.title = newTitle;\n *\n *    // note this is an \"effect\" or \"side-effect\" and highly discouraged\n *    // in app and library code.\n *    // These tend to become \"observers\", which are harder to debug and\n *    // fall under the \"spooky action at a distance\" code smell.\n *    setTitle = async () => {\n *      await Promise.resolve();\n *\n *      // accessing before the await auto-tracks,\n *      // because auto-tracking is synchronous\n *      let title = this.title;\n *\n *      this.title = `${title}!!!!!!`;\n *    }\n * }\n * ```\n *\n */\nexport function sync(fn: () => void | Promise<void>): void {\n  fn();\n}\n"],"names":["sync","fn"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,IAAIA,CAACC,EAA8B,EAAQ;AACzDA,EAAAA,EAAE,EAAE,CAAA;AACN;;;;"}