{"version":3,"file":"wait-until.js","sources":["../src/wait-until.ts"],"sourcesContent":["import { cell, resource, resourceFactory } from 'ember-resources';\n\n/**\n * Reactively wait for a time.\n * uses setTimeout and cleans up if the caller is cleaned up.\n *\n * Usage in a template\n * ```hbs\n * {{#let (WaitUntil 500) as |delayFinished|}}\n *    {{#if delayFinished}}\n *\n *      text displayed after 500ms\n *\n *    {{/if}}\n * {{/let}}\n * ```\n */\nexport const WaitUntil = resourceFactory((maybeDelayMs?: number | (() => number | undefined)) => {\n  return resource(({ on }) => {\n    const delayMs = typeof maybeDelayMs === 'function' ? maybeDelayMs() : maybeDelayMs;\n\n    // If we don't have a delay, we can start with\n    // immediately saying \"we're done waiting\"\n    const initialValue = delayMs ? false : true;\n    const delayFinished = cell(initialValue);\n\n    if (delayMs) {\n      const timer = setTimeout(() => (delayFinished.current = true), delayMs);\n\n      on.cleanup(() => clearTimeout(timer));\n    }\n\n    // Collapse the state that Cell provides to just a boolean\n    return () => delayFinished.current;\n  });\n});\n"],"names":["WaitUntil","resourceFactory","maybeDelayMs","resource","on","delayMs","initialValue","delayFinished","cell","timer","setTimeout","current","cleanup","clearTimeout"],"mappings":";;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaA,SAAS,GAAGC,eAAe,CAAEC,YAAkD,IAAK;EAC/F,OAAOC,QAAQ,CAAC,CAAC;AAAEC,IAAAA,EAAAA;AAAG,GAAC,KAAK;IAC1B,MAAMC,OAAO,GAAG,OAAOH,YAAY,KAAK,UAAU,GAAGA,YAAY,EAAE,GAAGA,YAAY,CAAA;;AAElF;AACA;AACA,IAAA,MAAMI,YAAY,GAAGD,OAAO,GAAG,KAAK,GAAG,IAAI,CAAA;AAC3C,IAAA,MAAME,aAAa,GAAGC,IAAI,CAACF,YAAY,CAAC,CAAA;AAExC,IAAA,IAAID,OAAO,EAAE;AACX,MAAA,MAAMI,KAAK,GAAGC,UAAU,CAAC,MAAOH,aAAa,CAACI,OAAO,GAAG,IAAK,EAAEN,OAAO,CAAC,CAAA;MAEvED,EAAE,CAACQ,OAAO,CAAC,MAAMC,YAAY,CAACJ,KAAK,CAAC,CAAC,CAAA;AACvC,KAAA;;AAEA;IACA,OAAO,MAAMF,aAAa,CAACI,OAAO,CAAA;AACpC,GAAC,CAAC,CAAA;AACJ,CAAC;;;;"}