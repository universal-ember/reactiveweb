{"version":3,"file":"index.js","sources":["../../../src/resource/modifier/index.ts"],"sourcesContent":["import { assert } from '@ember/debug';\nimport { setModifierManager } from '@ember/modifier';\n\nimport { resourceFactory } from 'ember-resources';\n\nimport FunctionBasedModifierManager from './manager.ts';\n\nimport type { ModifierLike } from '@glint/template';\nimport type { ArgsFor, ElementFor, EmptyObject } from '#types';\nimport type { resource } from 'ember-resources';\n\ntype PositionalArgs<S> = S extends { Args?: object } ? ArgsFor<S['Args']>['Positional'] : [];\ntype NamedArgs<S> = S extends { Args?: object }\n  ? ArgsFor<S['Args']>['Named'] extends object\n    ? ArgsFor<S['Args']>['Named']\n    : EmptyObject\n  : EmptyObject;\n\ntype ArgsForFn<S> = S extends { Args?: object }\n  ? ArgsFor<S['Args']>['Named'] extends EmptyObject\n    ? [...PositionalArgs<S>]\n    : [...PositionalArgs<S>, NamedArgs<S>]\n  : [];\n\n/**\n * A resource-based API for building modifiers.\n *\n * You can attach this to an element, and use a `resource` to manage\n * the state, add event listeners, remove event listeners on cleanup, etc.\n *\n * Using resources for modifiers provides a clear and concise API with\n * easy to read concerns.\n *\n *\n * The signature for the modifier here is _different_ from `ember-modifier`, where positional args and named args are grouped together into an array and object respectively.\n\n * This signature for ember-resource's `modifier` follows the [plain function invocation](https://blog.emberjs.com/plain-old-functions-as-helpers/) signature.\n *\n * ```js\n * import { resource } from 'ember-resources';\n * import { modifier } from 'reactiveweb/resource/modifier';\n *\n * const wiggle = modifier((element, arg1, arg2, namedArgs) => {\n *     return resource(({ on }) => {\n *         let animation = element.animate([\n *             { transform: `translateX(${arg1}px)` },\n *             { transform: `translateX(-${arg2}px)` },\n *         ], {\n *             duration: 100,\n *             iterations: Infinity,\n *         });\n *\n *         on.cleanup(() => animation.cancel());\n *     });\n * });\n *\n * <template>\n *     <div {{wiggle 2 5 named=\"hello\"}}>hello</div>\n * </template>\n * ```\n *\n */\nexport function modifier<El extends Element, Args extends unknown[] = unknown[]>(\n  fn: (element: El, ...args: Args) => void\n): ModifierLike<{\n  Element: El;\n  Args: {\n    Named: EmptyObject;\n    Positional: Args;\n  };\n}>;\n\n/**\n * A resource-based API for building modifiers.\n *\n * You can attach this to an element, and use a `resource` to manage\n * the state, add event listeners, remove event listeners on cleanup, etc.\n *\n * Using resources for modifiers provides a clear and concise API with\n * easy to read concerns.\n *\n *\n * The signature for the modifier here is _different_ from `ember-modifier`, where positional args and named args are grouped together into an array and object respectively.\n\n * This signature for ember-resource's `modifier` follows the [plain function invocation](https://blog.emberjs.com/plain-old-functions-as-helpers/) signature.\n *\n * ```js\n * import { resource } from 'ember-resources';\n * import { modifier } from 'reactiveweb/resource/modifier';\n *\n * const wiggle = modifier((element, arg1, arg2, namedArgs) => {\n *     return resource(({ on }) => {\n *         let animation = element.animate([\n *             { transform: `translateX(${arg1}px)` },\n *             { transform: `translateX(-${arg2}px)` },\n *         ], {\n *             duration: 100,\n *             iterations: Infinity,\n *         });\n *\n *         on.cleanup(() => animation.cancel());\n *     });\n * });\n *\n * <template>\n *     <div {{wiggle 2 5 named=\"hello\"}}>hello</div>\n * </template>\n * ```\n *\n */\nexport function modifier<S extends { Element?: Element }>(\n  fn: (element: ElementFor<S>, ...args: ArgsForFn<S>) => ReturnType<typeof resource>\n): ModifierLike<S>;\n/**\n * A resource-based API for building modifiers.\n *\n * You can attach this to an element, and use a `resource` to manage\n * the state, add event listeners, remove event listeners on cleanup, etc.\n *\n * Using resources for modifiers provides a clear and concise API with\n * easy to read concerns.\n *\n *\n * The signature for the modifier here is _different_ from `ember-modifier`, where positional args and named args are grouped together into an array and object respectively.\n\n * This signature for ember-resource's `modifier` follows the [plain function invocation](https://blog.emberjs.com/plain-old-functions-as-helpers/) signature.\n *\n * ```js\n * import { resource } from 'ember-resources';\n * import { modifier } from 'reactiveweb/resource/modifier';\n *\n * const wiggle = modifier((element, arg1, arg2, namedArgs) => {\n *     return resource(({ on }) => {\n *         let animation = element.animate([\n *             { transform: `translateX(${arg1}px)` },\n *             { transform: `translateX(-${arg2}px)` },\n *         ], {\n *             duration: 100,\n *             iterations: Infinity,\n *         });\n *\n *         on.cleanup(() => animation.cancel());\n *     });\n * });\n *\n * <template>\n *     <div {{wiggle 2 5 named=\"hello\"}}>hello</div>\n * </template>\n * ```\n *\n */\nexport function modifier<S extends { Args?: object }>(\n  fn: (element: ElementFor<S>, ...args: ArgsForFn<S>) => ReturnType<typeof resource>\n): ModifierLike<S>;\n/**\n * A resource-based API for building modifiers.\n *\n * You can attach this to an element, and use a `resource` to manage\n * the state, add event listeners, remove event listeners on cleanup, etc.\n *\n * Using resources for modifiers provides a clear and concise API with\n * easy to read concerns.\n *\n *\n * The signature for the modifier here is _different_ from `ember-modifier`, where positional args and named args are grouped together into an array and object respectively.\n\n * This signature for ember-resource's `modifier` follows the [plain function invocation](https://blog.emberjs.com/plain-old-functions-as-helpers/) signature.\n *\n * ```js\n * import { resource } from 'ember-resources';\n * import { modifier } from 'reactiveweb/resource/modifier';\n *\n * const wiggle = modifier((element, arg1, arg2, namedArgs) => {\n *     return resource(({ on }) => {\n *         let animation = element.animate([\n *             { transform: `translateX(${arg1}px)` },\n *             { transform: `translateX(-${arg2}px)` },\n *         ], {\n *             duration: 100,\n *             iterations: Infinity,\n *         });\n *\n *         on.cleanup(() => animation.cancel());\n *     });\n * });\n *\n * <template>\n *     <div {{wiggle 2 5 named=\"hello\"}}>hello</div>\n * </template>\n * ```\n *\n */\nexport function modifier<S extends { Element?: Element; Args?: object }>(\n  fn: (element: ElementFor<S>, ...args: ArgsForFn<S>) => ReturnType<typeof resource>\n): ModifierLike<S>;\n\nexport function modifier(fn: (element: Element, ...args: unknown[]) => void): ModifierLike<{\n  Element: Element;\n  Args: {\n    // eslint-disable-next-line @typescript-eslint/no-empty-object-type\n    Named: {};\n    Positional: [];\n  };\n}> {\n  assert(`modifier() must be invoked with a function`, typeof fn === 'function');\n  setModifierManager((owner) => new FunctionBasedModifierManager(owner), fn);\n  resourceFactory(fn);\n\n  return fn as unknown as ModifierLike<{\n    Element: Element;\n    Args: {\n      // eslint-disable-next-line @typescript-eslint/no-empty-object-type\n      Named: {};\n      Positional: [];\n    };\n  }>;\n}\n\n/**\n * @internal\n */\nexport type FunctionBasedModifierDefinition<S> = (\n  element: ElementFor<S>,\n  positional: PositionalArgs<S>,\n  named: NamedArgs<S>\n) => void;\n"],"names":["modifier","fn","assert","setModifierManager","owner","FunctionBasedModifierManager","resourceFactory"],"mappings":";;;;;AAwkD,EAOxE;AACDC,EAAAA,MAAM,CAAC,CAA4C,0CAAA,CAAA,EAAE,OAAOD,EAAE,KAAK,UAAU,CAAC,CAAA;EAC9EE,kBAAkB,CAAEC,KAAK,IAAK,IAAIC,4BAA4B,CAACD,KAAK,CAAC,EAAEH,EAAE,CAAC,CAAA;EAC1EK,eAAe,CAACL,EAAE,CAAC,CAAA;AAEnB,EAAA,OAAOA,EAAE,CAAA;AAQX,CAAA;;AAEA;AACA;AACA;;;;"}