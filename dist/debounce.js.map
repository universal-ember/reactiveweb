{"version":3,"file":"debounce.js","sources":["../src/debounce.ts"],"sourcesContent":["import { cell, resource } from 'ember-resources';\n\n/**\n * A utility for debouncing high-frequency updates.\n * The returned value will only be updated every `ms` and is\n * initially undefined, unless an initialize value is provided.\n *\n * This can be useful when a user's typing is updating a tracked\n * property and you want to derive data less frequently than on\n * each keystroke.\n *\n * Note that this utility requires the `@use` decorator\n * (debounce could be implemented without the need for the `@use` decorator\n * but the current implementation is 8 lines)\n *\n * @example\n * ```js\n *  import Component from '@glimmer/component';\n *  import { tracked } from '@glimmer/tracking';\n *  import { use } from 'ember-resources';\n *  import { debounce } from 'reactiveweb/debounce';\n *\n *  const delay = 100; // ms\n *\n *  class Demo extends Component {\n *    @tracked userInput = '';\n *\n *    @use debouncedInput = debounce(delay, () => this.userInput);\n *  }\n * ```\n *\n * @example\n * This could be further composed with RemoteData\n * ```js\n *  import Component from '@glimmer/component';\n *  import { tracked } from '@glimmer/tracking';\n *  import { use } from 'ember-resources';\n *  import { debounce } from 'reactiveweb/debounce';\n *  import { RemoteData } from 'reactiveweb/remote-data';\n *\n *  const delay = 100; // ms\n *\n *  class Demo extends Component {\n *    @tracked userInput = '';\n *\n *    @use debouncedInput = debounce(delay, () => this.userInput);\n *\n *    @use search = RemoteData(() => `https://my.domain/search?q=${this.debouncedInput}`);\n *  }\n * ```\n *\n * @example\n * An initialize value can be provided as the starting value instead of it initially returning undefined.\n * ```js\n *  import Component from '@glimmer/component';\n *  import { tracked } from '@glimmer/tracking';\n *  import { use } from 'ember-resources';\n *  import { debounce } from 'reactiveweb/debounce';\n *\n *  const delay = 100; // ms\n *\n *  class Demo extends Component {\n *    @tracked userInput = 'products';\n *\n *    @use debouncedInput = debounce(delay, () => this.userInput, this.userInput);\n *  }\n * ```\n *\n * @param {number} ms delay in milliseconds to wait before updating the returned value\n * @param {() => Value} thunk function that returns the value to debounce\n * @param {Value} initialize value to return initially before any debounced updates\n */\nexport function debounce<Value = unknown>(ms: number, thunk: () => Value, initialize?: Value) {\n  let lastValue: Value | undefined = initialize;\n  let state = cell<Value | undefined>(lastValue);\n\n  return resource(({ on }) => {\n    let timer: number;\n\n    lastValue = thunk();\n\n    on.cleanup(() => {\n      if (timer) {\n        clearTimeout(timer);\n      }\n    });\n\n    timer = setTimeout(() => {\n      state.current = lastValue;\n    }, ms);\n\n    return () => state.current;\n  });\n}\n"],"names":["debounce","ms","thunk","initialize","lastValue","state","cell","resource","on","timer","cleanup","clearTimeout","setTimeout","current"],"mappings":";;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,QAAQA,CAAkBC,EAAU,EAAEC,KAAkB,EAAEC,UAAkB,EAAE;EAC5F,IAAIC,SAA4B,GAAGD,UAAU,CAAA;AAC7C,EAAA,IAAIE,KAAK,GAAGC,IAAI,CAAoBF,SAAS,CAAC,CAAA;EAE9C,OAAOG,QAAQ,CAAC,CAAC;AAAEC,IAAAA,EAAAA;AAAG,GAAC,KAAK;AAC1B,IAAA,IAAIC,KAAa,CAAA;IAEjBL,SAAS,GAAGF,KAAK,EAAE,CAAA;IAEnBM,EAAE,CAACE,OAAO,CAAC,MAAM;AACf,MAAA,IAAID,KAAK,EAAE;QACTE,YAAY,CAACF,KAAK,CAAC,CAAA;AACrB,OAAA;AACF,KAAC,CAAC,CAAA;IAEFA,KAAK,GAAGG,UAAU,CAAC,MAAM;MACvBP,KAAK,CAACQ,OAAO,GAAGT,SAAS,CAAA;KAC1B,EAAEH,EAAE,CAAC,CAAA;IAEN,OAAO,MAAMI,KAAK,CAACQ,OAAO,CAAA;AAC5B,GAAC,CAAC,CAAA;AACJ;;;;"}