{"version":3,"file":"ember-concurrency.js","sources":["../src/ember-concurrency.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable ember/no-get */\nimport { assert } from '@ember/debug';\nimport { associateDestroyableChild, registerDestructor } from '@ember/destroyable';\nimport { get } from '@ember/object';\n\nimport { resource } from 'ember-resources';\n\nimport { DEFAULT_THUNK, normalizeThunk } from './utils.ts';\n\n/**\n * uses Resource to make ember-concurrency tasks reactive.\n *\n * -------------------------\n *\n * @note `ember-resources` does not provide or depend on ember-concurrency.\n * If you want to use task, you'll need to add ember-concurrency as a dependency\n * in your project.\n *\n * @example\n *  When `this.id` changes, the task will automatically be re-invoked.\n * ```js\n * import { tracked } from '@glimmer/tracking';\n * import { restartableTask, timeout } from 'ember-concurrency';\n * import { task as trackedTask } from 'reactiveweb/ember-concurrency';\n *\n * class Demo {\n *   @tracked id = 1;\n *\n *   searchTask = restartableTask(async () => {\n *     await timeout(200);\n *     await fetch('...');\n *     return 'the-value';\n *   })\n *\n *   last = trackedTask(this, this.searchTask, () => [this.id]);\n * }\n * ```\n * ```hbs\n * Available Properties:\n *  {{this.last.value}}\n *  {{this.last.isFinished}}\n *  {{this.last.isRunning}}\n * ```\n *  (and all other properties on a [TaskInstance](https://ember-concurrency.com/api/TaskInstance.html))\n *\n *\n */\nexport function task<\n  Return = unknown,\n  Args extends unknown[] = unknown[],\n  LocalTask extends TaskIsh<Args, Return> = TaskIsh<Args, Return>,\n>(context: object, task: LocalTask, thunk?: () => Args) {\n  assert(`Task does not have a perform method. Is it actually a task?`, 'perform' in task);\n\n  const state = new State<Args, Return, LocalTask>(task);\n\n  let destroyable = resource(context, () => {\n    let args = thunk || DEFAULT_THUNK;\n\n    let positional = normalizeThunk(args).positional as Args;\n\n    state[RUN](positional || []);\n\n    return state;\n  });\n\n  associateDestroyableChild(destroyable, state);\n\n  registerDestructor(state, () => state[TASK].cancelAll());\n\n  return destroyable as unknown as TaskInstance<Return>;\n}\n\nexport const trackedTask = task;\n\nexport type TaskReturnType<T> = T extends TaskIsh<any, infer Return> ? Return : unknown;\nexport type TaskArgsType<T> = T extends TaskIsh<infer Args, any> ? Args : unknown[];\n\nexport interface TaskIsh<Args extends any[], Return> {\n  perform: (...args: Args) => TaskInstance<Return>;\n  cancelAll: () => void;\n}\n\n/**\n * @private\n *\n * Need to define this ourselves, because between\n * ember-concurrency 1, 2, -ts, decorators, etc\n * there are 5+ ways the task type is defined\n *\n * https://github.com/machty/ember-concurrency/blob/f53656876748973cf6638f14aab8a5c0776f5bba/addon/index.d.ts#L280\n */\nexport interface TaskInstance<Return = unknown> extends Promise<Return> {\n  readonly value: Return | null;\n  readonly error: unknown;\n  readonly isSuccessful: boolean;\n  readonly isError: boolean;\n  readonly isCanceled: boolean;\n  readonly hasStarted: boolean;\n  readonly isFinished: boolean;\n  readonly isRunning: boolean;\n  readonly isDropped: boolean;\n  cancel(reason?: string): void | Promise<void>;\n}\n\n/**\n * @private\n */\nexport const TASK = Symbol('TASK');\n\nconst RUN = Symbol('RUN');\n\n/**\n * @private\n */\nexport class State<Args extends any[], Return, LocalTask extends TaskIsh<Args, Return>> {\n  // Set via useTask\n  declare [TASK]: LocalTask;\n\n  constructor(task: LocalTask) {\n    this[TASK] = task;\n\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self = this;\n\n    /*\n     * This proxy defaults to returning the underlying data on\n     * the task runner when '.value' is accessed.\n     *\n     * When working with ember-concurrency tasks, users have the expectation\n     * that they'll be able to inspect the status of the tasks, such as\n     * `isRunning`, `isFinished`, etc.\n     *\n     * To support that, we need to proxy to the `currentTask`.\n     *\n     */\n    return new Proxy(self, {\n      get(target, key): unknown {\n        if (key === RUN) {\n          return self[RUN];\n        }\n\n        const taskRunner = self;\n        const instance = taskRunner.currentTask;\n\n        if (!instance) {\n          return;\n        }\n\n        if (typeof key === 'string') {\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore\n          get(taskRunner.currentTask, key);\n        }\n\n        if (key === 'value') {\n          /**\n           * getter that falls back to the previous task's value\n           */\n          return taskRunner.value;\n        }\n\n        // We can be thennable, but we'll want to entangle with tracked data\n        if (key === 'then') {\n          get(taskRunner.currentTask, 'isRunning');\n        }\n\n        /**\n         * If the key is anything other than value, query on the currentTask\n         */\n        const value = Reflect.get(instance as object, key, instance);\n\n        return typeof value === 'function' ? value.bind(instance) : value;\n      },\n      // ownKeys(target): (string | symbol)[] {\n      //   return Reflect.ownKeys(target.value);\n      // },\n      // getOwnPropertyDescriptor(target, key): PropertyDescriptor | undefined {\n      //   return Reflect.getOwnPropertyDescriptor(target.value, key);\n      // },\n    });\n  }\n  // Set during setup/update\n  declare currentTask: TaskInstance<Return>;\n  declare lastTask: TaskInstance<Return> | undefined;\n\n  get value(): Return | null | undefined {\n    if (this.currentTask?.isFinished && !this.currentTask.isCanceled) {\n      return this.currentTask.value;\n    }\n\n    return this.lastTask?.value;\n  }\n\n  [RUN] = (positional: Args) => {\n    if (this.currentTask) {\n      this.lastTask = this.currentTask;\n    }\n\n    this.currentTask = this[TASK].perform(...positional);\n  };\n}\n"],"names":["task","context","thunk","assert","state","State","destroyable","resource","args","DEFAULT_THUNK","positional","normalizeThunk","RUN","associateDestroyableChild","registerDestructor","TASK","cancelAll","trackedTask","Symbol","constructor","self","Proxy","get","target","key","taskRunner","instance","currentTask","value","Reflect","bind","isFinished","isCanceled","lastTask","perform"],"mappings":"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"}