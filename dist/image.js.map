{"version":3,"file":"image.js","sources":["../src/image.ts"],"sourcesContent":["import { resource, resourceFactory } from 'ember-resources';\n\nimport { trackedFunction } from './function.ts';\n\n/**\n * Reactively load an Image with access to loading / error state.\n *\n * Usage in a component\n * ```js\n * import { ReactiveImage } from 'reactiveweb/image';\n * <template>\n *   {{#let (ReactiveImage 'https://path.to.image') as |state|}}\n *      {{#if imgState.isResolved}}\n *        <img src={{imgState.value}}>\n *      {{/if}}\n *   {{/let}}\n * </template>\n * ```\n *\n * Usage in a class\n * ```js\n * import { use } from 'ember-resources';\n * import { ReactiveImage } from 'reactiveweb/image';\n *\n * class Demo {\n *   @use imageState = ReactiveImage('https://path.to.image');\n * }\n * ```\n *\n * Reactive usage in a class\n * ```js\n * import { tracked } from '@glimmer/tracking';\n * import { use } from 'ember-resources';\n * import { ReactiveImage } from 'reactiveweb/image';\n *\n * class Demo {\n *   @tracked url = '...';\n *   @use imageState = ReactiveImage(() => this.url);\n * }\n * ```\n */\nexport const ReactiveImage = resourceFactory((maybeUrl: string | (() => string)) => {\n  return resource(({ use }) => {\n    const readonlyReactive = use(\n      trackedFunction(async () => {\n        /**\n         * NOTE: Image#onerror is a global error.\n         *       So in testing, the error escapes the confines\n         *       of this promise handler (trackedFunction)\n         *\n         * We need to \"swallow the rejection\" and re-throw\n         * by wrapping in an extra promise.\n         */\n        const image = new window.Image();\n        const url = typeof maybeUrl === 'function' ? maybeUrl() : maybeUrl;\n\n        function loadImage() {\n          /**\n           * Note tha lack of reject callback.\n           * This is what allows us to capture \"global errors\"\n           * thrown by image.onerror\n           *\n           * Additionally, the global error does not have a stack trace.\n           * And we want to provide a stack trace for easier debugging.\n           *\n           */\n          return new Promise((resolve) => {\n            image.onload = resolve;\n\n            /**\n             * The error passed to onerror doesn't look that useful.\n             *  But we'll log it just in case.\n             *\n             */\n            image.onerror = (error) => {\n              console.error(`Image failed to load at ${url}`, error);\n\n              /**\n               * If we use real reject, we cause an un-catchable error\n               */\n              resolve('soft-rejected');\n            };\n\n            image.src = url;\n          });\n        }\n\n        return await loadImage();\n      })\n    );\n\n    /**\n     * Here we both forward the state of trackedFunction\n     * as well as re-define how we want to determine what isError, value, and isResolved\n     * mean.\n     *\n     * This is because trackedFunction does not capture errors.\n     * I believe it _should_ though, so this may be a bug.\n     *\n     * If it ends up being a bug in trackedFunction,\n     * then we can delete all this, and only do:\n     *\n     * return () => readonlyReactive.current;\n     */\n    const isError = () => readonlyReactive.current.value === 'soft-rejected';\n\n    return {\n      get isError() {\n        return isError();\n      },\n      get value() {\n        if (isError()) return null;\n\n        return readonlyReactive.current.value;\n      },\n      get isResolved() {\n        if (isError()) return false;\n\n        return readonlyReactive.current.isResolved;\n      },\n      get isLoading() {\n        return readonlyReactive.current.isLoading;\n      },\n    };\n  });\n});\n"],"names":["ReactiveImage","resourceFactory","maybeUrl","resource","use","readonlyReactive","trackedFunction","image","window","Image","url","loadImage","Promise","resolve","onload","onerror","error","console","src","isError","current","value","isResolved","isLoading"],"mappings":";;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaA,aAAa,GAAGC,eAAe,CAAEC,QAAiC,IAAK;EAClF,OAAOC,QAAQ,CAAC,CAAC;AAAEC,IAAAA,GAAAA;AAAI,GAAC,KAAK;AAC3B,IAAA,MAAMC,gBAAgB,GAAGD,GAAG,CAC1BE,eAAe,CAAC,YAAY;AAC1B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACQ,MAAA,MAAMC,KAAK,GAAG,IAAIC,MAAM,CAACC,KAAK,EAAE,CAAA;MAChC,MAAMC,GAAG,GAAG,OAAOR,QAAQ,KAAK,UAAU,GAAGA,QAAQ,EAAE,GAAGA,QAAQ,CAAA;MAElE,SAASS,SAASA,GAAG;AACnB;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACU,QAAA,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;UAC9BN,KAAK,CAACO,MAAM,GAAGD,OAAO,CAAA;;AAEtB;AACZ;AACA;AACA;AACA;AACYN,UAAAA,KAAK,CAACQ,OAAO,GAAIC,KAAK,IAAK;YACzBC,OAAO,CAACD,KAAK,CAAC,CAAA,wBAAA,EAA2BN,GAAG,CAAE,CAAA,EAAEM,KAAK,CAAC,CAAA;;AAEtD;AACd;AACA;YACcH,OAAO,CAAC,eAAe,CAAC,CAAA;WACzB,CAAA;UAEDN,KAAK,CAACW,GAAG,GAAGR,GAAG,CAAA;AACjB,SAAC,CAAC,CAAA;AACJ,OAAA;MAEA,OAAO,MAAMC,SAAS,EAAE,CAAA;AAC1B,KAAC,CACH,CAAC,CAAA;;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,MAAMQ,OAAO,GAAGA,MAAMd,gBAAgB,CAACe,OAAO,CAACC,KAAK,KAAK,eAAe,CAAA;IAExE,OAAO;MACL,IAAIF,OAAOA,GAAG;QACZ,OAAOA,OAAO,EAAE,CAAA;OACjB;MACD,IAAIE,KAAKA,GAAG;AACV,QAAA,IAAIF,OAAO,EAAE,EAAE,OAAO,IAAI,CAAA;AAE1B,QAAA,OAAOd,gBAAgB,CAACe,OAAO,CAACC,KAAK,CAAA;OACtC;MACD,IAAIC,UAAUA,GAAG;AACf,QAAA,IAAIH,OAAO,EAAE,EAAE,OAAO,KAAK,CAAA;AAE3B,QAAA,OAAOd,gBAAgB,CAACe,OAAO,CAACE,UAAU,CAAA;OAC3C;MACD,IAAIC,SAASA,GAAG;AACd,QAAA,OAAOlB,gBAAgB,CAACe,OAAO,CAACG,SAAS,CAAA;AAC3C,OAAA;KACD,CAAA;AACH,GAAC,CAAC,CAAA;AACJ,CAAC;;;;"}